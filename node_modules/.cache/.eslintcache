[{"E:\\Assignment\\src\\index.js":"1","E:\\Assignment\\src\\App.js":"2","E:\\Assignment\\src\\components\\Form.jsx":"3"},{"size":189,"mtime":1702806042144,"results":"4","hashOfConfig":"5"},{"size":152,"mtime":1702806042109,"results":"6","hashOfConfig":"5"},{"size":4557,"mtime":1702840533967,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4i2th5",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"E:\\Assignment\\src\\index.js",[],[],"E:\\Assignment\\src\\App.js",[],[],"E:\\Assignment\\src\\components\\Form.jsx",["18"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nexport default function Form() {\n  const [user, setUser] = useState({\n    name: \"\",\n    age: \"\",\n    gender: \"\",\n    contact: \"\",\n    fee: \"\",\n    slot: \"\",\n  });\n\n  const [error, setError] = useState({});\n  const [success, setSuccess] = useState(false);\n  const [submit, isSubmit] = useState(false);\n\n  function hadleChange(e) {\n    const { name, value } = e.target;\n\n    setUser((prevUser) => {\n      return {\n        ...prevUser,\n        [name]: value,\n      };\n    });\n  }\n\n  function submitUser(e) {\n    e.preventDefault();\n    setError(validate(user));\n    isSubmit(true);\n  }\n\n  useEffect(() => {\n    if (Object.keys(error).length === 0 && submit) {\n      axios\n        .post(\"https://helpful-bass-wig.cyclic.app/\", user)\n        .then((res) => console.log(res.data));\n\n      setUser({\n        name: \"\",\n        age: \"\",\n        gender: \"\",\n        contact: \"\",\n        fee: \"\",\n        slot: \"\",\n      });\n      setSuccess(true);\n    }\n  }, [error]);\n\n  const validate = (values) => {\n    const errors = {};\n    if (!user.name) {\n      errors.name = \"Name is required!\";\n    }\n    if (!user.age) {\n      errors.age = \"Age is required!\";\n    } else if (parseInt(user.age) < 18 || parseInt(user.age) > 65) {\n      errors.age = \"Age must be between 18 and 65 years!\";\n    }\n    if (!user.gender) {\n      errors.gender = \"Gender is required!\";\n    }\n    if (!user.contact) {\n      errors.contact = \"Contact is required!\";\n    } else if (parseInt(user.contact) < 1000000000 || parseInt(user.contact) > 9999999999 || user.contact < \"1000000000\" || user.contact > \"9999999999\") {\n      errors.contact = \"Contact must be equal to 10 digit!\";\n    }\n    if (!user.fee) {\n      errors.fee = \"Fees is required!\";\n    } else if (parseInt(user.fee) !== 500) {\n      errors.fee = \"Fees must be equal to 500!\";\n    }\n    if (!user.slot) {\n      errors.slot = \"Select a slot!\";\n    }\n    return errors;\n  };\n\n  return (\n    <div className=\"box\">\n      <form autoComplete=\"off\">\n        <div className=\"heading\">\n        \n          <h1>{success ? (\n\n            \"Welcome to a spiritual Journey\\nPayment Succesfull\") \n            \n            : (\"Join YogaGuru\") }</h1>\n        </div>\n        {!success && (<div className=\"name\">\n          <label>Name: </label>\n          <input\n            type=\"text\"\n            placeholder=\"Your Name\"\n            name=\"name\"\n            value={user.name}\n            onChange={hadleChange}\n          ></input>\n        </div>)}\n        {!success && (<p>{error.name}</p>)}\n        {!success && (<div className=\"age\">\n          <label>Age: </label>\n          <input\n            type=\"text\"\n            placeholder=\"You Age\"\n            name=\"age\"\n            value={user.age}\n            onChange={hadleChange}\n          ></input>\n        </div>)}\n        {!success && (<p>{error.age}</p>)}\n        {!success && (<div className=\"gender\">\n          <label>Gender: </label>\n          <input\n            type=\"text\"\n            placeholder=\"Your Gender\"\n            name=\"gender\"\n            value={user.gender}\n            onChange={hadleChange}\n          ></input>\n        </div>)}\n        {!success && (<p>{error.gender}</p>)}\n        {!success && (<div className=\"contact\">\n          <label>Contact: </label>\n          <input\n            type=\"text\"\n            placeholder=\"Your Contact Number\"\n            name=\"contact\"\n            value={user.contact}\n            onChange={hadleChange}\n          ></input>\n        </div>)}\n        {!success && (<p>{error.contact}</p>)}\n        {!success && (<div className=\"fee\">\n          <label>Fee: </label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Amount\"\n            name=\"fee\"\n            value={user.fee}\n            onChange={hadleChange}\n          ></input>\n        </div>)}\n        {!success && (<p>{error.fee}</p>)}\n        {!success && (<div className=\"slot\">\n          <label>Slot: </label>\n          <select name=\"slot\" value={user.slot} onChange={hadleChange}>\n            <option className=\"option1\">Pick a slot</option>\n            <option>6-7 AM</option>\n            <option>7-8 AM</option>\n            <option>8-9 AM</option>\n            <option>5-6 PM</option>\n          </select>\n        </div>)}\n        {!success && (<p>{error.slot}</p>)}\n        {!success && (\n          <div className=\"btn\">\n            <button type=\"submit\" onClick={submitUser}>\n              Make Payment\n            </button>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n}\n",{"ruleId":"19","severity":1,"message":"20","line":51,"column":6,"nodeType":"21","endLine":51,"endColumn":13,"suggestions":"22"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'submit' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["23"],{"desc":"24","fix":"25"},"Update the dependencies array to be: [error, submit, user]",{"range":"26","text":"27"},[1029,1036],"[error, submit, user]"]